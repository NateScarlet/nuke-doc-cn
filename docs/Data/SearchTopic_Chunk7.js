define({"478":{i:0.00107677031960203,u:"../content/comp_environment/rendering/changing_frame_numbering.html",a:"By default, when you render an image sequence, Nuke assumes an exact relation between the currently processed frame and the numbering of the frame written out. Therefore, if you choose to render frame 15, the resulting file is numbered accordingly, for example image.0015.rgb. However, the frame ...",t:"Changing the Numbering of Rendered Frames"},"479":{i:0.0011678624841359,u:"../content/comp_environment/rendering/reading_files_using_write.html",a:"You can use a Write node to both render an image and read the rendered image back in. Because reading the output of a Write node from a file is faster than calculating its output by processing the node tree upstream, this can be particularly useful on large comps. When you have finished working on a ...",t:"Using a Write Node to Read in the Rendered Image"},"480":{i:0.000412590168058198,u:"../content/comp_environment/rendering/render_farms.html",a:"Nuke is supported by virtually all third-party and proprietary render-queuing software. By integrating Nuke with such a system, the render load can be distributed across all the Nuke-licensed machines on your network, whether Windows, Mac, or Linux-based. If you have a Nuke Studio license, you can ...",t:"Render Farms"},"481":{i:0.000336845055667826,u:"../content/comp_environment/organizing_scripts/organizing_scripts.html",a:"As scripts grow in complexity and are worked on by several people, it becomes increasingly important to organize them in a clear and meaningful way.  About This Chapter This section teaches you how to: display information about your Nuke script. See  Displaying Script Information . find and replace ...",t:"Organizing Scripts"},"482":{i:0.000378762353323609,u:"../content/comp_environment/organizing_scripts/displaying_script_info.html",a:"To display script information, such as the node count, channel count, cache usage, and whether the script is in full-resolution or proxy mode, do the following: Select File \u003e Comp Info (or press Alt+I). The script information window opens. If you make changes to your script while the window is open, ...",t:"Displaying Script Information"},"483":{i:0.000540614249040627,u:"../content/comp_environment/organizing_scripts/using_script_profiling.html",a:"Nuke can display accurate performance timing data onscreen or output it to XML file to help you troubleshoot bottlenecks in slow scripts. When performance timing is enabled, timing information is displayed in the Node Graph, and the nodes themselves are colored according to the proportion of the ...",t:"Using Script Profiling"},"484":{i:0.000378762353323609,u:"../content/comp_environment/organizing_scripts/file_name_search_replace.html",a:"With the Search and Replace function, you can quickly replace all or part of file names or file paths in any node with file or proxy controls (for example in Read and Write nodes). To Search for a File Name or File Path and Replace It Select the node(s) where you want to replace all or part of a ...",t:"File Name Search and Replace"},"485":{i:0.000378762353323609,u:"../content/comp_environment/organizing_scripts/grouping_nodes.html",a:"You can group nodes in the Node Graph using the Backdrop node or the Group node. The Backdrop node adds a background box behind the nodes, separating the nodes visually from the rest of the node tree. A Group node, instead, combines a set of nodes into a single node, acting as a nesting container ...",t:"Grouping Nodes in the Node Graph"},"486":{i:0.00055913269237093,u:"../content/comp_environment/organizing_scripts/grouping_nodes_backdrop.html",a:"You can use the Backdrop node to visually group nodes in the Node Graph. Inserting a Backdrop node creates a box behind the nodes. When you move the box, all the nodes that overlap the box are moved, too. By inserting several backdrop nodes, you can group the nodes in your node tree onto boxes of ...",t:"Grouping Nodes with the Backdrop Node"},"487":{i:0.000805656116988816,u:"../content/comp_environment/organizing_scripts/grouping_nodes_group.html",a:"You can use the Group node to nest multiple nodes inside a single node. To Group Nodes with a Group Node Select all the nodes you want to nest inside the Group node. If you want to replace the original nodes with the Group node, right-click and select Edit \u003e Node \u003e Group \u003e Collapse To Group (or ...",t:"Grouping Nodes with the Group Node"},"488":{i:0.000616397042170215,u:"../content/comp_environment/organizing_scripts/adding_notes_node_graph.html",a:"Using the StickyNote node, you can add notes to the Node Graph. The notes can be any text or HTML mark-up. Usually, they are made as annotations to the elements in the node tree. To Add a Note to the Node Graph Click on the part of the Node Graph where you want to add a note. Select Other \u003e ...",t:"Adding Notes to the Node Graph"},"489":{i:0.00121752442828107,u:"../content/comp_environment/organizing_scripts/using_precomp_node.html",a:"The Precomp node is like a Group node, but its content is stored in an independent .nk file. This allows you to save a subset of the node tree as a separate .nk script, render the output of this saved script, and read the rendered output back into the main comp as a single image input. Precomp nodes ...",t:"Using the Precomp Node"},"490":{i:0.00366026700434091,u:"../content/comp_environment/organizing_scripts/creating_precomp_nodes.html",a:"Whether you want to use the Precomp node to speed up rendering or to enable a collaborative workflow, the process of creating the Precomp is the same. To Create a Precomp Node Select the nodes you want to include in the separate precomp script. If you select a Group node, the nodes nested inside it ...",t:"Creating Precomp Nodes"},"491":{i:0.000321498003524325,u:"../content/comp_environment/organizing_scripts/using_precomp_rendering.html",a:"If you want to use a Precomp node to speed up rendering, you need to have the Precomp node read in the output of the precomp script. To Render a Precomp Node Create a Precomp node. For more information on how to do this, see  Creating Precomp Nodes . In the Precomp node controls, click Render. Enter ...",t:"Using a Precomp Node to Speed-up Rendering"},"492":{i:0.000458136250325134,u:"../content/comp_environment/organizing_scripts/precomp_revisions.html",a:"The following describes how to open, edit, and reload a precomp script. To View and Edit a Precomp Script In the Precomp node properties, click Open. This starts a new Nuke session and loads the precomp script. Edit the precomp script as necessary. If you are using version numbers in the Write node ...",t:"Precomp Revisions"},"493":{i:0.000321498003524325,u:"../content/comp_environment/organizing_scripts/collaborative_work_flow.html",a:"In this example, a compositor is responsible for the main comp that is delivered to the client. A lighting TD is responsible for providing a multi-layered CG render for use in the main comp. The following describes how the compositor and lighting TD could use the Precomp node to enable a ...",t:"Collaborative Workflow Example"},"494":{i:0.00110116048247126,u:"../content/comp_environment/configuring_nuke/configuring_nuke.html",a:"This chapter shows visual effects supervisors how to configure Nuke for multiple artists, prior to the start of a project.  About This Chapter These are the common application settings discussed in this chapter: command line operations Environment variables Gizmo, NDK plug-in, and Tcl script ...",t:"Configuring Nuke"},"495":{i:0.000321498003524325,u:"../content/comp_environment/configuring_nuke/what_is_terminal.html",a:"Many tasks in this chapter tell you to enter commands from a terminal or shell. This refers to a window where you can enter commands directly rather than making selections through a user interface. The following describes how to open such a window for your operating system. Linux: Click the right ...",t:"What Is a Terminal and How Do I Use One?"},"496":{i:0.00103111904329243,u:"../content/comp_environment/configuring_nuke/command_line_operations.html",a:"Command line flags activate various options when you launch Nuke from a command line or Terminal, and provide additional functionality to Nuke. First let’s discuss how to launch Nuke from a shell. On Windows If you\u0027re using a terminal emulator, follow the steps under Mac OS X or Linux, substituting ...",t:"Command Line Operations"},"497":{i:0.007370655503318,u:"../content/comp_environment/configuring_nuke/environment_variables.html",a:"Environment Variables Environment variables are named variables used to store a value, such as a specific file path. They can be used to influence Nuke’s behavior. For example, Nuke uses the information stored in them to define where to place certain files.",t:"Environment Variables"},"498":{i:0.00845265582267393,u:"../content/comp_environment/configuring_nuke/setting_environment_variables.html",a:"This section teaches you how to set environment variables, check if a particular environment variable exists, and display a list of set environment variables. To Set an Environment Variable On Windows Right-click on My Computer and select Properties. Go to the Advanced tab. Click the Environment ...",t:"Setting Environment Variables"},"499":{i:0.00473380739130193,u:"../content/comp_environment/configuring_nuke/nuke_environment_variables.html",a:"Nuke  Environment Variables The following table lists the environment variables Nuke recognizes.",t:"Nuke Environment Variables"},"500":{i:0.0078482834795832,u:"../content/comp_environment/configuring_nuke/loading_gizmos_plugins_scripts.html",a:"On start-up, Nuke scans various directories for files that customize the behavior of Nuke. It looks for information on favorite directories, menu options, image formats, gizmos, NDK plug-ins, Python scripts, generic Tcl scripts, and preferences. It’s worth saying that you should edit Python files ...",t:"Loading Gizmos, NDK Plug-ins, and Python and Tcl Scripts"},"501":{i:0.00365708787843281,u:"../content/comp_environment/configuring_nuke/defining_nuke_plugin_path.html",a:"To define the plug-in path: On each artist’s machine, create an environment variable called NUKE_PATH. Assign the NUKE_PATH environment variable to the path name of the directory where files related to Nuke customization will reside. For example, on Mac OS X using a csh or tcsh shell: setenv ...",t:"Defining the Nuke Plug-in Path"},"502":{i:0.00132746143580219,u:"../content/comp_environment/configuring_nuke/loading_ofx_plugins.html",a:"On start-up, Nuke scans various directories for OFX plug-ins that bring additional functionality to Nuke. Paths to these directories vary between operating systems, but here are examples of where you may find them: Linux: /usr/OFX/Nuke /usr/OFX/Plugins Windows: C:\\Program Files\\Common Files\\OFX\\Nuke ...",t:"Loading OFX Plug-ins"},"503":{i:0.000321498003524325,u:"../content/comp_environment/configuring_nuke/common_favorite_directories.html",a:"Favorite directories can be accessed by artists with a single click from any Nuke file browser. Typically you would create these favorites for common directories on a project. To Define a Common Set of Favorite Directories To define an common set of favorite directories: Create a file called menu.py ...",t:"Defining Common Favorite Directories"},"504":{i:0.000321498003524325,u:"../content/comp_environment/configuring_nuke/file_paths_cross_platform.html",a:"If your facility uses Nuke on several operating systems, you may want to configure Nuke to replace the beginnings of file paths so that scripts created on one platform also work on another. For example, to ensure file paths created on Windows also work on Linux and vice versa, you can do the ...",t:"Handling File Paths Cross Platform"},"505":{i:0.000321498003524325,u:"../content/comp_environment/configuring_nuke/setting_default_parameter_values.html",a:"You can set default values for node controls by adding a simple line of Python to your init.py file. Once a default value is set, all controls with matching names default to this value. For example, you can set default values for file format specific controls in the Read, Write or other file ...",t:"Setting Default Values for Controls"},"506":{i:0.00153902804685215,u:"../content/comp_environment/configuring_nuke/custom_menus_toolbars.html",a:"You can freely add custom menus and menu options as well as toolbars and toolbar options to the Nuke interface. Artists can then use these options to trigger gizmos and plug-ins stored in the plug-in path directory. For example, to add a new menu in the default Toolbar with an option to trigger a ...",t:"Defining Custom Menus and Toolbars"},"507":{i:0.000321498003524325,u:"../content/comp_environment/configuring_nuke/common_image_formats.html",a:"You may wish to define image formats (image resolutions and corresponding pixel aspect ratios) for a given project. These appear as dropdown menus on Read and Reformat nodes.  Defining an Image Format To define an image format: If you haven’t already done so, create a file called menu.py in your ...",t:"Defining Common Image Formats"},"508":{i:0.000523986207665988,u:"../content/comp_environment/configuring_nuke/gizmos_custom_plugins_tcl.html",a:"Nuke allows artists and technical directors to create gizmos, which are simply groups of Nuke nodes that may be reused by other artists. These are equivalent to Shake’s  macros. Studios commonly use gizmos to consistently apply certain color grading techniques, process incoming footage according to ...",t:"Gizmos, Custom Plug-ins, and Generic Tcl Scripts"},"509":{i:0.00136541454499409,u:"../content/comp_environment/configuring_nuke/creating_sourcing_gizmos.html",a:"Using Nuke’s Export gizmo command, you can export a group of nodes and explicitly control which controls may be edited by the artists to ensure the processes within the gizmo are consistently applied.  Creating Gizmos To create a gizmo:  Select the nodes you want to include in the gizmo. Select ...",t:"Creating and Sourcing Gizmos"},"510":{i:0.000321498003524325,u:"../content/comp_environment/configuring_nuke/custom_plugins.html",a:"The Nuke developer’s kit (NDK) allows developers to create and compile their own binary plug-ins.  To Source a Custom Plug-in Place the plug-in file in the plug-in path directory. Its name should include a .dll (on Windows), .so (on Linux) or .dylib (on Mac) extension. For more information on ...",t:"Custom Plug-ins"},"511":{i:0.000321498003524325,u:"../content/comp_environment/configuring_nuke/sourcing_tcl_procedure.html",a:"A Nuke script or gizmo is in fact a Tcl procedure (script). Thus, Nuke also allows you to hand code generic Tcl procedures to automate Nuke in various ways.  To Source a Generic Tcl Procedure Place the Tcl procedure file in the plug-in path directory. Its name should include a .tcl extension. For ...",t:"Sourcing Tcl Procedure"},"512":{i:0.00129308081874996,u:"../content/comp_environment/configuring_nuke/template_scripts.html",a:"You can create a template script that is loaded instead of an empty script every time you launch Nuke or select File \u003e New Comp or File \u003e Close Comp. This allows you to save lookup table (LUT) setups and favorite arrangements of nodes, for example. Creating and Using a Template Script To create and ...",t:"Template Scripts"},"513":{i:0.000321498003524325,u:"../content/comp_environment/configuring_nuke/common_preferences.html",a:"The Nuke Preferences dialog (Edit \u003e Preferences) allows any user to make myriad behavior and display adjustments to the interface. However, you may wish to assign certain default preferences for artists. Defining Default Preferences To define default preferences: Select Edit \u003e Preferences to display ...",t:"Defining Common Preferences"},"514":{i:0.000321498003524325,u:"../content/comp_environment/configuring_nuke/altering_script_luts.html",a:"A script’s lookup tables are curves that control the conversion between file or device color spaces and Nuke’s internal color space. In the Curve Editor, the x axis represents the input pixel values and the y axis the output pixel values (normalized to the 0-1 range). When applying LUTs, Nuke looks ...",t:"Altering a Script’s Lookup Tables (LUTs)"},"515":{i:0.000321498003524325,u:"../content/comp_environment/configuring_nuke/displaying_adding_editing_luts.html",a:"The Color tab in the Nuke Project Settings allows you to view, add, edit, and delete Nuke\u0027s native LUTs. You can\u0027t adjust LUTs that appear under the OCIO color management scheme. See  OCIO Color Management  for more information. To Display LUT Curves Select Edit \u003e Project Settings to open the ...",t:"Managing Nuke\u0027s Native LUTs"},"516":{i:0.000321498003524325,u:"../content/comp_environment/configuring_nuke/selecting_luts.html",a:"To select the LUT to use when reading or writing an image: Double-click to open the Read or Write node’s properties panel. From the colorspace dropdown menu, select the LUT you want to use. To use the default LUT defined in Nuke’s settings for the image type in question (see  Default LUT Settings ), ...",t:"Selecting the LUT to Use"},"517":{i:0.000594774497125944,u:"../content/comp_environment/configuring_nuke/default_lut_settings.html",a:"By default, Nuke uses the following LUTs in the following cases: To Change the Default LUT Settings Select Edit \u003e Project Settings to open the settings for the script. Go to the Color tab. From the dropdown menus under Default LUT settings, select the LUTs you want to use by default for each file ...",t:"Default LUT Settings"},"518":{i:0.000321498003524325,u:"../content/comp_environment/configuring_nuke/example_lut_cases.html",a:"Below are some examples of situations where you might need to alter the default LUTs. Working in Video Colorspace Emulating compositor software that works in video color space is not recommended. However, if you do need to do so, do the following: Select Edit \u003e Project Settings and go to the Color ...",t:"Example Cases"},"519":{i:0.0039637914589606,u:"../content/comp_environment/configuring_nuke/using_ocio_config_files.html",a:"Nuke uses OpenColorIO for color management. All of the colorspaces in Nuke, whether those shipped with the application or custom colorspaces, are defined in OCIO config files. Depending on the OCIO config file that you are working with, there are a number of colorspace options and roles (aliases to ...",t:"OCIO Color Management"},"520":{i:0.000640443680441105,u:"../content/comp_environment/configuring_nuke/creating_viewer_processes.html",a:"Using look-up tables (LUTs) in Viewer Processes, you can adjust individual Viewer displays to simulate the way the image looks on output to film or some video display device. Nuke includes some predefined Viewer Process gizmos, but you can also add your own processes by registering a node or gizmo ...",t:"Creating Custom Viewer Processes"},"521":{i:0.000387347960865178,u:"../content/comp_environment/configuring_nuke/using_gizmo_viewer_process.html",a:"To create a custom Viewer Process, you would typically create a gizmo that includes some color correction like a look-up table (LUT) and register it as a Viewer Process using Python. (For more information on gizmos, see  Gizmos, Custom Plug-ins, and Generic Tcl Scripts .) If you want to use one of ...",t:"Using a Gizmo as a Custom Viewer Process"},"522":{i:0.000321498003524325,u:"../content/comp_environment/configuring_nuke/applying_viewer_processes.html",a:"In the Viewer controls, you can apply a custom Viewer process to images displayed in the Viewer and open the controls for the currently active Viewer process. To Apply Your Custom Viewer Process to Images Displayed in a Viewer Select the process from the Viewer Process dropdown menu in the Viewer ...",t:"Applying Custom Viewer Processes to Images"},"523":{i:0.00647025835462743,u:"../content/comp_environment/expressions/expressions.html",a:"This chapter is intended as a primer on how to apply expressions (programmatic commands) to Nuke parameters. It explains how to perform some common tasks with expressions (for example, how to link the values of one parameter to another), and concludes with a table all the functions that you may ...",t:"Expressions"},"524":{i:0.00356838822695389,u:"../content/comp_environment/expressions/linking_expressions.html",a:"Through expressions, you can link the parameters from one node and control the values of the parameters in other nodes. When creating a linking expression, type the elements listed in the table below; remember to separate each element with a period. Thus, to create a linking expression that pulls ...",t:"Linking Expressions"},"525":{i:0.00215476979212358,u:"../content/comp_environment/expressions/adding_math_functions.html",a:"You can incorporate mathematical functions into parameters. For example, you might negate an expression in order to invert a tracking curve which you wish to use to stabilize an element (such an expression might resemble the following: -(Transform1.translate.x)). You can also rely on a function to ...",t:"Adding Mathematical Functions to Expressions"},"526":{i:0.00215476979212358,u:"../content/comp_environment/expressions/converting_expressions.html",a:"Depending on where you need to use an expression, you might find that you want to, for example, convert Nuke expressions to Tcl expressions or embed Python functions in a Nuke expression. The different languages are used in different parts of Nuke: Python can be used in the Script Editor, in the ...",t:"Converting Expressions Between Scripting Languages"},"527":{i:0.00367243493057631,u:"../content/comp_environment/script_editor/script_editor_python.html",a:" Nuke ships with a comprehensive Python application programming interface (API), enabling you to perform user interface actions using Python scripting. This chapter describes how you can use the Script Editor for executing Python scripts and directs you to sources of more information on Python. ...",t:"The Script Editor and Python "},"528":{i:0.000321498003524325,u:"../content/comp_environment/script_editor/using_script_editor.html",a:"Using the  Script Editor If you\u0027re not using a third-party Python interpreter, you can type Python scripts into Nuke’s Script Editor. Opening the Script Editor To open the Script Editor, click on one of the content menus and select Script Editor from the menu that opens. Input and Output Panes The ...",t:"Using the Script Editor"},"529":{i:0.000321498003524325,u:"../content/comp_environment/script_editor/automating_procedures.html",a:"Okay, so you know how to use the Script Editor to type in a sequence of Python statements that take care of a procedure. But so far, you’ve still sat by your computer typing the statements in. It’s time to automate the procedure. All you need to do is save your statements, and when you want to use ...",t:"Automating Procedures"},"530":{i:0.0044491061674105,u:"../content/comp_environment/script_editor/nuke_python_module.html",a:"You can import Nuke as a module into a third-party Python 2.7.3 interpreter, granting full access to the Nuke Python-API, but from within a native Python interpreter instead of Nuke. Foundry cannot provide customer support for third-party Python interpreters. To run Nuke as a Python module: Add the ...",t:"Nuke as a Python Module"},"531":{i:0.00145002559912438,u:"../content/comp_environment/script_editor/python_getting_help.html",a:"In the scope of this user guide, it’s not possible to go into detail with Python and all the scripts available. However, there are several sources of more information that you may find useful if you need help using Python. More Documentation In the Python Developer’s Guide, you’ll find everything ...",t:"Getting Help"},"532":{i:0.000336845055667826,u:"../content/timeline_environment/preface/nukestudio_timeline.html",a:"Nuke Studio\u0027s timeline is designed to provide shot management, conform, and playback capabilities for people creating visual effects and delivers visual effects sequences without resorting to other third party applications. Organization of the Section These are the topics covered by this section: ...",t:"Timeline Editing in Nuke Studio"},"533":{i:0.000572662434504732,u:"../content/timeline_environment/usingtags/using_tags.html",a:"Tags are used by Nuke Studio to quickly sort or filter clips and clip instances  for better visibility, organization, and export. Introduction Tags are used to mark shots of a particular type or content as you organize your project. The default tags supplied include Approved, Note, Reference, and ...",t:"Using Tags"},"534":{i:0.00036053750261027,u:"../content/timeline_environment/usingtags/using_quick_tags.html",a:"Quick tags allow you to add tags, depending on context, by right-clicking a selection and then choosing the type of tag to apply. If you’re tagging a large amount of media, you might find it more convenient to use the drag-and-drop methods described later on. Quick tags are accessible from bins, ...",t:"Using Quick Tags"},"535":{i:0.000417529542752818,u:"../content/timeline_environment/usingtags/tagging_using_viewer.html",a:"To apply a tag using the Viewer: Click the Tags tab, or navigate to Window \u003e Tags. The Tags panel displays. Drag-and-drop the required tag from the Tags panel to the Viewer. Depending on whether you’re looking at a clip or sequence, drop the tag on Tag this frame, Tag whole clip, or Tag whole ...",t:"Tagging Using the Viewer"},"536":{i:0.000321498003524325,u:"../content/timeline_environment/usingtags/tagging_track_items.html",a:"To apply a tag to a clip instance on the timeline: Click the Tags tab, or navigate to Window \u003e Tags. The Tags panel displays. Drag-and-drop the required tag from the Tags panel to the timeline. Depending on where the tag is dropped, you’ll mark a clip instance (or items if you make multiple ...",t:"Tagging Clip Instances"},"537":{i:0.000321498003524325,u:"../content/timeline_environment/usingtags/adding_notes_to_tags.html",a:"In some cases, a simple tag on a frame or clip may not contain all the information that you wish to pass on to the next stage of production. Adding notes to a tag can provide that extra detail. To delete a note, don’t click the - button because this refers to the tag. Instead, simply delete the ...",t:"Adding Notes to Tags"},"538":{i:0.000474728272527726,u:"../content/timeline_environment/usingtags/removing_tags.html",a:"To remove a tag from a frame or clip, click the tag and then click  . You can remove all tags from a clip or selection of clips by right-clicking your selections in the bin and choosing Tags \u003e Clear Tags. To remove a tag from a track or clip instance, click on a tag icon and select the required tag ...",t:"Removing Tags"},"539":{i:0.000611366519328536,u:"../content/timeline_environment/usingtags/creating_custom_tags.html",a:"You may find that you require a specific tag or suite of tags that are not provided by default. Creating custom tags allows you to really control the organization of your media, and you can even create your own tag icons. Custom tags can only be created in the Tags panel. To create a custom tag: ...",t:"Creating Custom Tags"},"540":{i:0.000321498003524325,u:"../content/timeline_environment/usingtags/sharing_tags.html",a:"Custom tags can be shared between artists by saving them in a project in a shared network location. Shared tags are loaded at startup and appear in the Tags tab, below the standard tags that ship with Nuke Studio. Create the required custom tags as described in  Creating Custom Tags . Save the .hrox ...",t:"Sharing Custom Tags"},"541":{i:0.000594774497125944,u:"../content/timeline_environment/usingtags/filter_flag_tags.html",a:"You can search for clips containing certain tags, for example, if you wanted to find all clips that you tagged as Approved. There are two types of tag search you can perform: Filter and Flag. Select the desired search type by clicking the magnifier icon in the Project tab. Filter - displays all ...",t:"Filtering and Flagging Media Using Tags"},"542":{i:0.000350130178423967,u:"../content/timeline_environment/metadata/view_metadata.html",a:"Metadata is information that describes media content, separate from the clip itself, in the form of a table on the Metadata tab. Types of metadata include Duration, File Size, and the Path to the location of the source media. Source Clip and Clip Instance Metadata To view metadata for a bin clip, ...",t:"Viewing Metadata"},"543":{i:0.000321498003524325,u:"../content/timeline_environment/metadata/filter_flag_metadata.html",a:"If searching your project using tags has not filtered your media effectively, you can search for clips containing certain metadata. For example, if you wanted to find all clips that had a particular resolution or frame rate. To filter or flag using metadata: Right-click the clip that contains the ...",t:"Filtering and Flagging Media Using Metadata"},"544":{i:0.000350130178423967,u:"../content/timeline_environment/conforming/conforming.html",a:"Conforming describes the process of matching up the footage from a shoot with the required edit decisions to create a meaningful timeline. Introduction Nuke Studio accepts sequences either from EDLs (edit decision lists), AAFs (advanced authoring format), or Final Cut Pro XML files from a specified ...",t:"Conforming Using Nuke Studio"},"545":{i:0.000956782128425092,u:"../content/timeline_environment/conforming/project_settings.html",a:"Timeline Environment  Project Settings A good place to start work is by defining default Project Settings before importing sequences, particularly in the case of EDLs as they may not contain frame rate information. Project Settings only apply to the current project and override Preferences settings. ...",t:"Timeline Environment Project Settings"},});